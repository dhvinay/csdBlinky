/******************************************************************************
 *
 *                          Copyright 2021 Siemens
 *                           All Rights Reserved
 *
 * THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION WHICH IS
 * THE PROPERTY OF SIEMENS OR ITS LICENSORS AND IS SUBJECT TO LICENSE TERMS.
 *
 ******************************************************************************
 *
 * This file is automatically generated by VSC.
 * Do not edit manually!
 * VSC Version:  2.6.8
 * BswMPlugin:   com.mentor.bsw.bswm.generator 5.18.0
 *
 ******************************************************************************
 *
 * Module:       BswM
 *
 * File Name:    BswM_Private_Types.h
 *
 * Description:  Internal type definitions of the BswM module.
 *
 * Requirements: [SWS_BSWM-00001.v2] BswM imported types.
 *               [SWS_BSWM-00007] BswM does not require any mandatory interfaces
 *                                for fulfilling its core functionality.
 *
 ******************************************************************************/

#ifndef BSWM_PRIVATE_TYPES_H
#define BSWM_PRIVATE_TYPES_H

/*=============================== INCLUSIONS =================================*/

#include "BswM_Types.h"

/** Inclusion of module specific callback headers *****************************/

#include "BswM_EcuM.h"

/** Other optional inclusions *************************************************/


/** Inclusions needed by configured Actions ***********************************/


/*============================= VERSION CHECK ================================*/

/*============================ TYPE DEFINITIONS ==============================*/

/** Forward type definitions for LT types *************************************/

typedef struct BswM_RulePropertiesType_TAG    BswM_RulePropertiesType;

/** Basic type definitions ****************************************************/

/* Type used for indexing Lookup arrays */
typedef uint16 BswM_LookupIndexType;

/* Type definition for IpduGrouphandleIds */
typedef uint8 BswM_MaxIpduGroupType;

/* Type definition for TriggerGroupId */
typedef uint8 BswM_MaxScheduleType;

/* Type definition for indexing Actions, Rules and Actionlists. */
typedef uint16 BswM_IdType;

/* Type definition for storing the ID of PduGroupSwitch Actions to be executed */
typedef uint8 BswM_PduActionId;

/* Type definition for storing the ID of DeadlineMonitoringControl Actions to be executed */
typedef uint8 BswM_DMActionId;

/* Type definition for PduRouterControl Action */
typedef uint8 BswM_RoutingPathType;

/* Request ID type for BswMModeSwitchErrorEvent ModeRequestPorts */
typedef uint8 BswM_ErrorEventIdType;

/* Current state of an Event, either BSWM_EVENT_IS_CLEARED or BSWM_EVENT_IS_SET */
typedef uint8 BswM_EventStateType;


/** Enum type definitions *****************************************************/

/**
 * Enumeration to handle RTE Events internally
 */
typedef enum BswM_EventType_TAG
{
    BSWM_ON_ENTRY,
    BSWM_ON_EXIT
} BswM_EventType;

/**
 * Enumeration to represent ActionListExecution type
 */
typedef enum BswM_ActionListExecType_TAG
{
    BSWM_TRIGGER,
    BSWM_CONDITION
} BswM_ActionListExecType;

/**
 * Defines whether the ActionListItem refers to a BswMAction or BswMRule or
 * another BswMActionList
 */
typedef enum BswM_ActionListItemTypeEnum_TAG
{
    BSWM_ACTION,
    BSWM_CONTEXT_ACTION,
    BSWM_RULE,
    BSWM_ACTIONLIST
} BswM_ActionListItemTypeEnum;


/** General structure type definitions ****************************************/

/** Structure definition for storing the context of a Rule Evaluation */
typedef struct BswM_GlobalRuleEvaluationType_TAG
{
    /* Indicates the result of the Rule evaluation:
     *  - BSWM_FALSE
     *  - BSWM_TRUE
     *  - BSWM_UNDEFINED */
    VAR(uint8, TYPEDEF) previousResult;

    /* Indicates whether the Rule shall be evaluated in te MainFunction or not:
     *  - BSWM_IN_MAIN --> yes
     *  - BSWM_NOT_MAIN -> not */
    VAR(boolean, TYPEDEF) inMain;

} BswM_GlobalRuleEvaluationType;

/** Structure definition for storing ActionListItem related properties */
typedef struct BswM_ActionListItemType_TAG
{
    /* Type of the ActionListItem: BSWM_ACTION / BSWM_RULE / BSWM_ACTIONLIST / BSWM_CONTEXT_ACTION */
    CONST(BswM_ActionListItemTypeEnum, TYPEDEF) type;
    /* Index of the BswMAction in BswM_ActionsArray[] or
     * Index of the BswMRule in BswM_RuleProperties[] or
     * Index of the BswMActionList in BswM_AllActionLists[] or
     * Index of the BswMContextAction in BswM_ContextActionsArray[]
     * which shall be decided based on the 'type' value */
    CONST(BswM_IdType, TYPEDEF) elementIndex;
    /* Index of the specific Action structure holding the parameters of the required function call */
    CONST(BswM_IdType, TYPEDEF) parameterIndex;
    /* BswMAbortOnFail enabled or disabled */
    CONST(boolean, TYPEDEF) hasAbortOnFail;
} BswM_ActionListItemType;

/** Structure definition for storing ActionList related properties */
struct BswM_ActionListType_TAG
{
    /* Pointer to an array containing ActionListItems of this ActionList */
    CONSTP2CONST(BswM_ActionListItemType, TYPEDEF, BSWM_CONST) ptrActionListItems;
    /* Execution type is either CONDITION or TRIGGER */
    CONST(BswM_ActionListExecType, TYPEDEF) executionType;
    /* Number of ActionlistItems in this ActionList */
    CONST(uint8, TYPEDEF) itemsTotalCount;
};

/** Structure definition for storing Rule related Post-Build properties */
struct BswM_RulePBPropertiesType_TAG
{
    /* Pointer to the TRUE ActionList of the Rule */
    CONSTP2CONST(BswM_ActionListType, TYPEDEF, BSWM_CONST) ptrTrueActionList;
    /* Pointer to the FALSE ActionList of the Rule */
    CONSTP2CONST(BswM_ActionListType, TYPEDEF, BSWM_CONST) ptrFalseActionList;
    /* True if the Rule has to be evaluated in every MainFunction */
    CONST(boolean, TYPEDEF) isCyclic;
};


/** Actions related structure type definitions ********************************/





/** Mode Request Sources related structure type definitions *******************/


/*** 'BswMEcuMIndication' ModeRequestSource */

/** Structure definition for a lookup table entry for 'BswMEcuMIndication' ModeRequestSources */
typedef struct BswM_EcuMLookupType_TAG
{
    /* Internal index of the Rule */
    CONST(BswM_RuleIndexType, TYPEDEF) ruleIndex;
    /* Internal index of the Mode Request Port */
    CONST(BswM_PortIndexType, TYPEDEF) portIndex;
    /* Indicates the processing type of the Mode Request Port (either BSWM_IMMEDIATE or BSWM_DEFERRED) */
    CONST(boolean, TYPEDEF) portProcessingType;
    /* Indicates whether it is a Subordinate Rule (TRUE) or a Standalone Rule (FALSE) */
    CONST(boolean, TYPEDEF) ruleIsNestedOnly;
} BswM_EcuMLookupType;

/** Structure definition for storing init values of a 'BswMEcuMIndication' ModeRequestSource */
typedef struct BswM_EcuMPortInitType_TAG
{
    /* Init Mode */
    CONST(EcuM_StateType, TYPEDEF) initValue;
    /* Init value should be considered or not */
    CONST(boolean, TYPEDEF) isPresent;
} BswM_EcuMPortInitType;

/** Structure definition for storing current state of a 'BswMEcuMIndication' ModeRequestSource */
typedef struct BswM_EcuMCurrentStateType_TAG
{
    /* Current state */
    VAR(EcuM_StateType, TYPEDEF) value;
    /* Indicates whether the state value is valid or not */
    VAR(boolean, TYPEDEF) isValid;
} BswM_EcuMCurrentStateType;



/*** 'BswMEcuMWakeupSource' ModeRequestSource */

/** Structure definition for a lookup table entry for 'BswMEcuMWakeupSource' ModeRequestSources */
typedef struct BswM_EcuMWakeupLookupType_TAG
{
    /* Internal index of the Rule */
    CONST(BswM_RuleIndexType, TYPEDEF) ruleIndex;
    /* Internal index of the Mode Request Port */
    CONST(BswM_PortIndexType, TYPEDEF) portIndex;
    /* Indicates the processing type of the Mode Request Port (either BSWM_IMMEDIATE or BSWM_DEFERRED) */
    CONST(boolean, TYPEDEF) portProcessingType;
    /* Indicates whether it is a Subordinate Rule (TRUE) or a Standalone Rule (FALSE) */
    CONST(boolean, TYPEDEF) ruleIsNestedOnly;
} BswM_EcuMWakeupLookupType;

/** Structure definition for storing init values of a 'BswMEcuMWakeupSource' ModeRequestSource */
typedef struct BswM_EcuMWakeupPortInitType_TAG
{
    /* Init Mode */
    CONST(EcuM_WakeupStatusType, TYPEDEF) initValue;
    /* Init value should be considered or not */
    CONST(boolean, TYPEDEF) isPresent;
} BswM_EcuMWakeupPortInitType;

/** Structure definition for storing current state of a 'BswMEcuMWakeupSource' ModeRequestSource */
typedef struct BswM_EcuMWakeupCurrentStateType_TAG
{
    /* Current state */
    VAR(EcuM_WakeupStatusType, TYPEDEF) value;
    /* Indicates whether the state value is valid or not */
    VAR(boolean, TYPEDEF) isValid;
} BswM_EcuMWakeupCurrentStateType;



/** Global Property structure type definitions ********************************/

/**
 * Structure definition for storing the number of Lookup Table entries per ModeRequestSource
 * The Lookup Tables hold each Rule <--> ModeRequestPort pair
 * This is necessary because a Rule uses 1..* ModeRequestPorts and a ModeRequestPort can be used by 0..* Rules
 */
typedef struct BswM_LookupSizeStructType_TAG
{
    /* Number of Lookup table entries for 'BswMEcuMIndication' ModeRequestSource */
    VAR(BswM_LookupIndexType, TYPEDEF) EcuM;
    /* Number of Lookup table entries for 'BswMEcuMWakeupSource' ModeRequestSource */
    VAR(BswM_LookupIndexType, TYPEDEF) EcuMWakeup;
} BswM_LookupSizeStructType;

/** Structure definition for storing the number of ModeRequestPorts configured per ModeRequestSource */
typedef struct BswM_CurrentStateSizeStructType_TAG
{
    /* Number of 'BswMEcuMIndication' type ModeRequestPorts */
    VAR(BswM_PortIndexType, TYPEDEF) EcuM;
    /* Number of 'BswMEcuMWakeupSource' type ModeRequestPorts */
    VAR(BswM_PortIndexType, TYPEDEF) EcuMWakeup;
} BswM_CurrentStateSizeStructType;

/*============================ MACRO DEFINITIONS =============================*/

/*===================== EXTERNAL VARIABLE DECLARATIONS =======================*/

/*===================== EXTERNAL FUNCTION DECLARATIONS =======================*/

#endif /* BSWM_PRIVATE_TYPES_H */
/*==================== END OF FILE BswM_Private_Types.h ======================*/
