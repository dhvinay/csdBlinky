/******************************************************************************
 *
 *                          Copyright 2021 Siemens
 *                           All Rights Reserved
 *
 * THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION WHICH IS
 * THE PROPERTY OF SIEMENS OR ITS LICENSORS AND IS SUBJECT TO LICENSE TERMS.
 *
 ******************************************************************************
 *
 * This file is automatically generated by VSC.
 * Do not edit manually!
 * VSC Version:  2.6.8
 * BswMPlugin:   com.mentor.bsw.bswm.generator 5.18.0
 *
 ******************************************************************************
 *
 * Module:       BswM
 *
 * File Name:    BswM_GeneratedTypes.h
 *
 * Description:  Constains definition of Link-Time configuration dependent,
 *               internally used types.
 *
 ******************************************************************************/

#ifndef BSWM_GENERATEDTYPES_H
#define BSWM_GENERATEDTYPES_H

/*=============================== INCLUSIONS =================================*/

#include "BswM_Types.h"

#ifdef BSWM_INTERNAL_LCFG_SYMBOL_EXPORT_NEEDED
#   include "BswM_Private_Types.h"
#endif

/*============================== VERSION INFO ================================*/

#define BSWM_GENERATEDTYPES_SW_MAJOR_VERSION   (5U)
#define BSWM_GENERATEDTYPES_SW_MINOR_VERSION   (18U)
#define BSWM_GENERATEDTYPES_SW_PATCH_VERSION   (0U)

/*============================ TYPE DEFINITIONS ==============================*/

/** Internal type definitions *************************************************/

/**
 * The following Link-Time type definitions shall be visible only in the
 * internally generated BswM LT files!
 */
#ifdef BSWM_INTERNAL_LCFG_SYMBOL_EXPORT_NEEDED

/* Maximum number of PduGroupSwitch Actions configured */
#define BSWM_PDU_GROUP_SWITCH_ACTIONS_MAX                  ((uint32) 0U)

/* Size of the required bitfield which registers the triggered PduGroupSwitch Action */
#define BSWM_PDU_GROUP_SWITCH_ACTIONS_BITFIELD_SIZE        ((uint32) ((uint32)(BSWM_PDU_GROUP_SWITCH_ACTIONS_MAX >> 3) + 1U))

/* Maximum number of DeadlineMonitoring Actions configured */
#define BSWM_DEADLINE_MONITORING_ACTIONS_MAX               ((uint32) 0U)

/* Size of the required bitfield which registers the triggered DeadlineMonitoring Action */
#define BSWM_DEADLINE_MONITORING_ACTIONS_BITFIELD_SIZE     ((uint32) ((uint32)(BSWM_DEADLINE_MONITORING_ACTIONS_MAX >> 3) + 1U))

/* typedef for BswM_PduRRoutingPathGroupIdType */
typedef uint16 BswM_PduRRoutingPathGroupIdType;

/**
 * Structure created on stack for each processing cycle to delay execution of
 * PduGroupSwitch, DeadlineMonitoringControl and ClearEventRequest Actions.
 */
typedef struct BswM_EvalContextType_TAG
{
    /* Number of PduGroupSwitch Actions triggered in current processing cycle */
    VAR(BswM_PduActionId, TYPEDEF) pduGroupActionCount;

    /* Number of DeadlineMonitoringControl Actions triggered in current processing cycle */
    VAR(BswM_DMActionId, TYPEDEF) deadlineMonitoringActionCount;
} BswM_EvalContextType;


/* Function pointer type definition for all BswMAction functions except for 'PduGroupSwitch' and 'DeadlineMonitoringControl' */
typedef P2FUNC(boolean, BSWM_CODE, BswM_ActionFuncPtrType) (CONSTP2CONST(BswM_ActionListItemType, TYPEDEF, BSWM_CONST) ptrActionListItem);

/* Function pointer type definition for 'PduGroupSwitch' and 'DeadlineMonitoringControl' type BswMAction functions */
typedef P2FUNC(boolean, BSWM_CODE, BswM_PduGroupActionFuncPtrType) (CONSTP2CONST(BswM_ActionListItemType, TYPEDEF, BSWM_CONST) ptrActionListItem,
                                                                    CONSTP2VAR(BswM_EvalContextType, TYPEDEF, AUTOMATIC) ptrContext);

/* Function pointer type definition for BswMRule functions */
typedef P2FUNC(boolean, BSWM_CODE, BswM_RuleFuncPtrType) (CONSTP2VAR(BswM_EvalContextType, TYPEDEF, AUTOMATIC) ptrContext);

/** Structure definition for storing Rule related properties */
struct BswM_RulePropertiesType_TAG
{
    /* Rule function pointer */
    CONST(BswM_RuleFuncPtrType, TYPEDEF) ruleFunction;

    /* Initial state of the rule: BSWM_FALSE, BSWM_TRUE, BSWM_UNDEFINED */
    CONST(uint8, TYPEDEF) initState;

    /* Initial state for processing the rule in the next MainFunction: BSWM_IN_MAIN, BSWM_NOT_MAIN */
    CONST(boolean, TYPEDEF) inMainDefaultValue;
};

/** Structure definition for storing current state of a 'BswMBswModeNotification' ModeRequestSource */
typedef struct BswM_BswNotificationCurrentStateType0_TAG
{
    /* Current state */
    VAR(Rte_ModeType_BswM_StateType, TYPEDEF) value;
    /* Indicates whether the state value is valid or not */
    VAR(boolean, TYPEDEF) isValid;
} BswM_BswNotificationCurrentStateType0;



#endif /* BSWM_INTERNAL_LCFG_SYMBOL_EXPORT_NEEDED */

/*============================ MACRO DEFINITIONS =============================*/

/*===================== EXTERNAL VARIABLE DECLARATIONS =======================*/

/*===================== EXTERNAL FUNCTION DECLARATIONS =======================*/

#endif /* BSWM_GENERATEDTYPES_H */
/*==================== END OF FILE BswM_GeneratedTypes.h =====================*/
